#include <bits/stdc++.h>
using namespace std;

struct Process {
    int pid; // Process ID 
    int bt;  // Burst Time 
    int art; // Arrival Time
};

// Function to find the waiting time for all processes
void findWaitingTime(Process proc[], int n, int wt[]) {
    int rt[n]; // Remaining time
    for (int i = 0; i < n; i++) {
        rt[i] = proc[i].bt; // Copy the burst time
    }

    int complete = 0, t = 0, minm = INT_MAX; 
    int shortest = 0, finish_time;
    bool check = false;

    // Process until all processes are completed
    while (complete != n) {
        // Find process with minimum remaining time among the processes that arrive until the current time
        for (int j = 0; j < n; j++) {
            if ((proc[j].art <= t) && (rt[j] < minm) && (rt[j] > 0)) {
                minm = rt[j];
                shortest = j;
                check = true;
            }
        }

        if (check == false) {
            t++;
            continue;
        }

        // Reduce remaining time by one
        rt[shortest]--;

        // Update minimum
        minm = rt[shortest];
        if (minm == 0) {
            minm = INT_MAX;
        }

        // If a process gets completely executed
        if (rt[shortest] == 0) {
            // Increment complete
            complete++;
            check = false;

            // Find finish time of current process
            finish_time = t + 1;

            // Calculate waiting time
            wt[shortest] = finish_time - proc[shortest].bt - proc[shortest].art;
            if (wt[shortest] < 0) {
                wt[shortest] = 0;
            }
        }
        // Increment time
        t++;
    }
}

// Function to calculate turnaround time
void findTurnAroundTime(Process proc[], int n, int wt[], int tat[]) {
    // Calculating turnaround time by adding bt[i] + wt[i]
    for (int i = 0; i < n; i++) {
        tat[i] = proc[i].bt + wt[i];
    }
}

// Function to calculate average time
void findAvgTime(Process proc[], int n) {
    int wt[n], tat[n], total_wt = 0, total_tat = 0;

    // Function to find waiting time of all processes
    findWaitingTime(proc, n, wt);
    // Function to find turnaround time for all processes
    findTurnAroundTime(proc, n, wt, tat);

    // Display processes along with all details
    cout << "Processes" << "\tBurst time" << "\tWaiting time" << "\tTurn around time\n";
    // Calculate total waiting time and total turnaround time
    for (int i = 0; i < n; i++) {
        total_wt += wt[i];
        total_tat += tat[i];
        cout << proc[i].pid << "\t\t" << proc[i].bt << "\t\t" << wt[i] << "\t\t" << tat[i] << endl;
    }
    cout << "\nAverage waiting time = " << (float)total_wt / (float)n;
    cout << "\nAverage turnaround time = " << (float)total_tat / (float)n;
}

// Driver code
int main() {
    int n;
    cout << "Enter the number of processes: ";
    cin >> n;

    Process proc[n]; // Create an array of processes

    // Input process details from the user
    for (int i = 0; i < n; i++) {
        cout << "Enter details for process " << (i + 1) << ":\n";
        cout << "Process ID: ";
        cin >> proc[i].pid;
        cout << "Burst Time: ";
        cin >> proc[i].bt;
        cout << "Arrival Time: ";
        cin >> proc[i].art;
    }

    findAvgTime(proc, n);
    return 0;
}

OUTPUT :-
Enter the number of processes: 3
Enter details for process 1:
Process ID: 1
Burst Time: 8
Arrival Time: 0
Enter details for process 2:
Process ID: 2
Burst Time: 4
Arrival Time: 1
Enter details for process 3:
Process ID: 3
Burst Time: 9
Arrival Time: 2
Processes      Burst time      Waiting time     Turn around time
1              8               4               12
2              4               0               4
3              9               10              19

Average waiting time = 4.66667
Average turnaround time = 11.6667
